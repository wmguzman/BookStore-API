@page "/Register"

@inject NavigationManager _navigation
@inject IAuthenticationRepository _repository

<div class="card">
    <h3 class="card-title">Register</h3>
    @if (isFailed)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with the registretion attempt</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="registrationModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText Id="email" class="form-control" @bind-Value="registrationModel.EmailAddress" />
                <ValidationMessage For="@(() => registrationModel.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
                <ValidationMessage For="@(() => registrationModel.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();

    bool isFailed = false;

    private async Task HandleRegistration()
    {
        var response = await _repository.Register(registrationModel);

        if (response)
        {
            _navigation.NavigateTo("/login");
        }
        else
        {
            isFailed = true;
        }


        
    }
}
