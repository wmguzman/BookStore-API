@page "/authors/edit/{Id}"

@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repository
@inject NavigationManager _navigation

<h3>Edit Author</h3>
@if (isFailed){
    <div class="alert alert-danger">
        <p>Something went wrong with the edit</p>
    </div>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Author for edit..."/>
}
else
{
<EditForm Model="Model" OnValidSubmit="EditAuthor">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname"></InputText>
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-Value="Model.Lastname" class="form-control" id="lastname"></InputText>
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio"></InputTextArea>
    </div>
    <button class="btn btn-primary">Edit</button>
    <button class="btn btn-outline-secondary" @onclick="BackToList">
        <span class="oi oi-arrow-left">Back to list</span>
    </button>
</EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();
    private bool isFailed = true;

    protected async override Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repository.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navigation.NavigateTo("/authors/");
    }

    private async Task EditAuthor()
    {
        bool isSuccess = await _repository.Update(Endpoints.AuthorsEndpoint, Model, Model.Id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {

        }
    }
}
