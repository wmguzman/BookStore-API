@page "/authors/"

@inject IAuthorRepository _repository

<h3>index</h3>

@if (Model == null)
{
    <div class="alert alert-dismissible alert-secondary">
        <LoadingMessage Message="Loading Data..." />
    </div>
}
else
{
    <AuthorizeView Roles="Administrator">
        <a href="/authors/create" class="btn btn-primary">
            <span class="oi oi-plus"></span>
            Create new Author
        </a>
    </AuthorizeView>
    @if (Model.Count < 1)
    {
        <div class="alert alert-dismissible alert-secondary">
            <LoadingMessage Message="There are no authors in the data store. Create an author to begin." />
        </div>
    }
    else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Model)
                {
                    <tr>
                        <td>@author.Firstname</td>
                        <td>@author.Lastname</td>
                        <td>
                            <a href="/authors/view/@author.Id" class="btn btn-primary"><span class="oi oi-book"></span></a>
                            <a href="/authors/edit/@author.Id" class="btn btn-warning"><span class="oi oi-pencil"></span></a>
                            <a href="/authors/delete/@author.Id" class="btn btn-warning"><span class="oi oi-pencil"></span></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}




@code {
    private IList<Author> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _repository.Get(Endpoints.AuthorsEndpoint);
    }
}
