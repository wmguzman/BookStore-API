@page "/authors/create/"

@inject IAuthorRepository _repository
@inject NavigationManager _navigation

<h3>Create new Author</h3>
@if (!isSuccess)
{
    <div class="alert alert-danger">
        <p>Something went wrong with the creation</p>
    </div>
}

    <EditForm Model="Model" OnValidSubmit="CreateAuthor">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname"></InputText>
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Model.Lastname" class="form-control" id="lastname"></InputText>
        </div>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio"></InputTextArea>
        </div>
        <button class="btn btn-primary">Create</button>
        <button class="btn btn-outline-secondary" @onclick="BackToList">
            <span class="oi oi-arrow-left">Back to list</span>
        </button>
    </EditForm>



@code {

    private Author Model = new Author();
    private bool isSuccess = true;


    private void BackToList()
    {
        _navigation.NavigateTo("/authors/");
    }

    private async Task CreateAuthor()
    {
        isSuccess = await _repository.Create(Endpoints.AuthorsEndpoint, Model);
        if (isSuccess)
        {
            BackToList();
        }
    }
}
